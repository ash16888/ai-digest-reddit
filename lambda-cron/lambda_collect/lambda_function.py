import json
import os
from typing import Any, Dict

import boto3

from fetch_posts import collect_posts
from filter_posts import filter_collected_posts
from utils import get_berlin_date_string


def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    Lambda handler –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ Reddit.
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ Lambda (–æ—Ç EventBridge)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Lambda
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ Lambda —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
    print(f"üìã Event: {json.dumps(event, default=str, indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤
    if event.get("source") == "aws.lambda":
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –æ—Ç –¥—Ä—É–≥–æ–π Lambda —Ñ—É–Ω–∫—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return {
            "statusCode": 200,
            "body": {"status": "skipped", "reason": "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –æ—Ç Lambda"}
        }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        date_str = get_berlin_date_string()
        print(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –ª–∏ —É–∂–µ –ø–æ—Å—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from utils import check_s3_key_exists
        all_posts_key = f"data/all_posts_{date_str}.json"
        
        if check_s3_key_exists(all_posts_key):
            print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return {
                "statusCode": 200,
                "body": {
                    "status": "skipped", 
                    "reason": f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
                    "date": date_str
                }
            }
        
        # –≠—Ç–∞–ø 1: –°–±–æ—Ä –ø–æ—Å—Ç–æ–≤
        print("\nüì• –≠—Ç–∞–ø 1: –°–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ Reddit")
        collect_result = collect_posts()
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {collect_result}")
        
        # –≠—Ç–∞–ø 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
        print("\nüîç –≠—Ç–∞–ø 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
        filter_result = filter_collected_posts(date_str)
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filter_result}")
        
        # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ Lambda —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        print("\nüìä –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        summarize_function_name = os.environ.get("SUMMARIZE_FUNCTION_NAME")
        
        if summarize_function_name:
            try:
                lambda_client = boto3.client("lambda")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                summarize_payload = {
                    "date": date_str,
                    "filtered_posts_s3_key": filter_result["filtered_posts_s3_key"],
                    "all_posts_s3_key": filter_result["all_posts_s3_key"]
                }
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                response = lambda_client.invoke(
                    FunctionName=summarize_function_name,
                    InvocationType='Event',  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                    Payload=json.dumps(summarize_payload)
                )
                
                print(f"‚úÖ Lambda —Ñ—É–Ω–∫—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞: {summarize_function_name}")
                print(f"Response StatusCode: {response['StatusCode']}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        else:
            print("‚ö†Ô∏è  SUMMARIZE_FUNCTION_NAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "statusCode": 200,
            "body": {
                "status": "success",
                "message": "–°–±–æ—Ä –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                "date": date_str,
                "collect_result": collect_result,
                "filter_result": filter_result,
                "summarize_triggered": bool(summarize_function_name)
            }
        }
        
        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {date_str}")
        return result
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
        print(error_message)
        
        return {
            "statusCode": 500,
            "body": {
                "status": "error",
                "message": error_message,
                "date": get_berlin_date_string()
            }
        }