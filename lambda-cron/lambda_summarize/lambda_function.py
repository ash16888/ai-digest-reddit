import json
from typing import Any, Dict

from summarize import generate_digest


def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    Lambda handler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ Reddit –ø–æ—Å—Ç–æ–≤.
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ Lambda (–æ—Ç –¥—Ä—É–≥–æ–π Lambda –∏–ª–∏ —Ç–µ—Å—Ç)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Lambda
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print("üìä –ó–∞–ø—É—Å–∫ Lambda —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {json.dumps(event, ensure_ascii=False, indent=2)}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è
        date_str = event.get("date")
        filtered_posts_s3_key = event.get("filtered_posts_s3_key")
        all_posts_s3_key = event.get("all_posts_s3_key")
        
        if not date_str:
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'date' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏")
        if not filtered_posts_s3_key:
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'filtered_posts_s3_key' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏")
        if not all_posts_s3_key:
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'all_posts_s3_key' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏")
        
        print(f"üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ {date_str}")
        print(f"üìÑ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {filtered_posts_s3_key}")
        print(f"üìÑ –í—Å–µ –ø–æ—Å—Ç—ã: {all_posts_s3_key}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        result = generate_digest(date_str, filtered_posts_s3_key, all_posts_s3_key)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = {
            "statusCode": 200,
            "body": {
                "status": "success",
                "message": "–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
                "result": result
            }
        }
        
        print(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result}")
        return response
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
        print(error_message)
        
        return {
            "statusCode": 500,
            "body": {
                "status": "error",
                "message": error_message,
                "event": event
            }
        }