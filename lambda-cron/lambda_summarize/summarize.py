import json
import os
from typing import Any

import openai
from openai import OpenAI
from tenacity import (
    retry,
    retry_if_exception_type,
    stop_after_attempt,
    wait_exponential,
)

from utils import download_from_s3, format_date_for_digest, upload_to_s3


def prepare_prompt_data(
    posts: list[dict[str, Any]], formatted_date_for_digest: str
) -> dict[str, Any]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API —Å –ª–æ–≥–∏–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.

    Args:
        posts: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        formatted_date_for_digest: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ

    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    """
    posts_by_subreddit = {}

    for post in posts:
        subreddit = post["subreddit"]
        if subreddit not in posts_by_subreddit:
            posts_by_subreddit[subreddit] = []

        posts_by_subreddit[subreddit].append(
            {
                "title": post["title"],
                "score": post["score"],
                "num_comments": post["num_comments"],
                "permalink": post["permalink"],
                "selftext": post["selftext"][:500] if post["selftext"] else "",
                "author": post["author"],
            }
        )

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤
    major_subreddits = {k: v for k, v in posts_by_subreddit.items() if len(v) >= 5}
    minor_subreddits = {k: v for k, v in posts_by_subreddit.items() if len(v) < 5}

    return {
        "major_subreddits": major_subreddits,
        "minor_subreddits": minor_subreddits,
        "instructions": (
            "–°–¥–µ–ª–∞–π –æ–±–∑–æ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤, –∏—Å–∫–ª—é—á–∏ –ø—Ä–∏ —ç—Ç–æ–º —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã, "
            "–º–µ–º—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏. –°–¥–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è "
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.\n\n"
            "–õ–û–ì–ò–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò:\n"
            "1. –î–ª—è —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤ —Å 5 –∏ –±–æ–ª–µ–µ –ø–æ—Å—Ç–∞–º–∏: —Å–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏, –≤—ã–≤–µ–¥–∏ –¥–æ 10 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n"
            "2. –î–ª—è —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤ —Å –º–µ–Ω–µ–µ —á–µ–º 5 –ø–æ—Å—Ç–∞–º–∏: –æ–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –æ–±—â–∏–π —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ—á–∏–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã'\n\n"
            "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n\n"
            f"# –î–∞–π–¥–∂–µ—Å—Ç Reddit ‚Ä¢ {formatted_date_for_digest}\\n\\n"
            "## r/[Subreddit] (–¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤)\n"
            "### –¢–û–ü-10\n"
            "1. **[–ó–∞–≥–æ–ª–æ–≤–æ–∫]** ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (üëç [score] | üí¨ [comments]) [üîó –°—Å—ã–ª–∫–∞](permalink)\n"
            "...\n\n"
            "## –ü—Ä–æ—á–∏–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã (–¥–ª—è –º–µ–ª–∫–∏—Ö —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤)\n"
            "### r/[Subreddit]\n"
            "1. **[–ó–∞–≥–æ–ª–æ–≤–æ–∫]** ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (üëç [score] | üí¨ [comments]) [üîó –°—Å—ã–ª–∫–∞](permalink)\n"
            "...\n\n"
            "–í–ê–ñ–ù–û: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –ø–æ–ª—è 'permalink' –≤ —Ñ–æ—Ä–º–∞—Ç–µ [üîó –°—Å—ã–ª–∫–∞](permalink_url). "
            "–ù–ï –¥–æ–±–∞–≤–ª—è–π —Ä–∞–∑–¥–µ–ª —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ - –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ."
        ),
    }


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=1, min=4, max=60),
    retry=retry_if_exception_type(openai.APIError)
    | retry_if_exception_type(openai.APITimeoutError)
    | retry_if_exception_type(openai.RateLimitError),
)
def call_openai_api_for_top_posts(data: dict[str, Any], api_key: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        api_key: API –∫–ª—é—á OpenAI

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–∑–æ—Ä —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤
    """
    client = OpenAI(api_key=api_key)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_data = {
        "major_subreddits": data["major_subreddits"],
        "minor_subreddits": data["minor_subreddits"],
    }

    prompt = f"{data['instructions']}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{json.dumps(analysis_data, ensure_ascii=False, indent=2)}"

    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            temperature=0.15,
            top_p=1.0,
            presence_penalty=0,
            frequency_penalty=0.1,
            seed=42,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=8000,
        )

        return response.choices[0].message.content

    except (openai.APIError, openai.APITimeoutError, openai.RateLimitError) as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
        raise
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API –¥–ª—è —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤: {e}")
        raise


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=1, min=4, max=60),
    retry=retry_if_exception_type(openai.APIError)
    | retry_if_exception_type(openai.APITimeoutError)
    | retry_if_exception_type(openai.RateLimitError),
)
def call_openai_api_for_trends(all_posts: list[dict[str, Any]], api_key: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –≤ OpenAI API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.

    Args:
        all_posts: –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        api_key: API –∫–ª—é—á OpenAI

    Returns:
        str: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    """
    client = OpenAI(api_key=api_key)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ - —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    posts_for_trends = []
    for post in all_posts:
        posts_for_trends.append(
            {
                "title": post["title"],
                "subreddit": post["subreddit"],
                "score": post["score"],
                "num_comments": post["num_comments"],
                "selftext": post["selftext"][:200]
                if post["selftext"]
                else "",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            }
        )

    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ Reddit —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤ ChatGPT, OpenAI, ClaudeAI, Bard, GeminiAI, DeepSeek –∏ grok. "
        "–ù–∞–π–¥–∏ 5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö. "
        "–ò—Å–∫–ª—é—á–∏ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –∏ –º–µ–º—ã. "
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º–∞—Ö, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ–ø—ã—Ç–µ –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ò–ò. "
        "–ö–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–¥ –æ–ø–∏—Å—ã–≤–∞–π –Ω–µ –±–æ–ª–µ–µ —á–µ–º –≤ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –∫—Ä–∞—Ç–∫–æ –∏ –µ–º–∫–æ. "
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n\n"
        "#### –û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã\n"
        "* **[–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞]** ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: [—á–∏—Å–ª–æ]\n"
        "* **[–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞]** ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: [—á–∏—Å–ª–æ]\n"
        "...\n\n"
        f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{json.dumps(posts_for_trends, ensure_ascii=False, indent=2)}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            temperature=0.15,
            top_p=1.0,
            presence_penalty=0,
            frequency_penalty=0.1,
            seed=42,
            messages=[{"role": "user", "content": prompt}],
            max_completion_tokens=8000,
        )

        return response.choices[0].message.content

    except (openai.APIError, openai.APITimeoutError, openai.RateLimitError) as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
        raise
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        raise


def generate_digest(date_str: str, filtered_posts_s3_key: str, all_posts_s3_key: str) -> dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.
    
    Args:
        date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        filtered_posts_s3_key: –ö–ª—é—á S3 —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
        all_posts_s3_key: –ö–ª—é—á S3 —Å –≤—Å–µ–º–∏ –ø–æ—Å—Ç–∞–º–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Ç–æ–ø-10
    try:
        filtered_data = download_from_s3(filtered_posts_s3_key)
        filtered_posts = filtered_data["posts"]
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_posts)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ S3")
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    try:
        all_data = download_from_s3(all_posts_s3_key)
        all_posts = all_data["posts"]
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_posts)} –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    if not filtered_posts:
        raise Exception("–ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD-MM-YYYY –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
    formatted_date = format_date_for_digest(date_str)
    prompt_data = prepare_prompt_data(filtered_posts, formatted_date)

    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤...")
    try:
        top_posts_digest = call_openai_api_for_top_posts(prompt_data, api_key)
        print("–¢–æ–ø-–ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø-–ø–æ—Å—Ç—ã: {e}")

    print("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...")
    try:
        trends_analysis = call_openai_api_for_trends(all_posts, api_key)
        print("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã: {e}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    digest = top_posts_digest + "\n\n---\n\n" + trends_analysis

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ S3
    report_s3_key = f"reports/digest_{date_str}.md"
    success = upload_to_s3(digest, report_s3_key)
    
    if not success:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ S3: {report_s3_key}")

    print(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ S3: {report_s3_key}")
    print(f"–†–∞–∑–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤")

    return {
        "status": "success",
        "date": date_str,
        "digest_s3_key": report_s3_key,
        "digest_size": len(digest),
        "total_filtered_posts": len(filtered_posts),
        "total_all_posts": len(all_posts)
    }